{
  "duplicateCode": {
    "name": "Duplicate Code",
    "type": "smell",
    "details": [
      "The same code is found in two or more places.", 
      "Can be fixed with Code Deletion, Extract Method."
    ]
  },
  "codeDeletion": {
    "name": "Code Deletion",
    "type": "refactoring",
    "details": [
      "Simply delete the unnecessary code.",
      "Can be used on Duplicate Code, Speculative Generality, Alternative Classes with Different Interfaces, Long Parameter List."
    ]
  },
  "speculativeGenerality": {
    "name": "Speculative Generality",
    "type": "smell",
    "details": [
      "There is an unused code segment, usually created in case a new feature is added."
    ]
  },
  "shotgunSurgery": {
    "name": "Shotgun Surgery",
    "type": "smell",
    "details": [
      "Changing the code requires making many small changes by hand in many places.",
      "Can be fixed with Extract Method."
    ]
  },
  "extractMethod": {
    "name": "Extract Method",
    "type": "refactoring",
    "details": [
      "Take similar code that appears more than once and make a new method. Replace this code with calls to the new method.",
      "Can be used on Long Method, Shotgun Surgery, Switch Statement Misuse."
    ]
  },
  "switchStatementMisuse": {
    "name": "Switch Statement Misuse",
    "type": "smell",
    "details": [
      "A complex system of if-statements that is hard to understand.",
      "Can be fixed with Extract Method."
    ]
  },
  "longMethod": {
    "name": "Long Method",
    "type": "smell",
    "details": [
      "A method that is too long to understand easily.",
      "Can be fixed with Extract Method."
    ]
  },
  "featureEnvy": {
    "name": "Feature Envy",
    "type": "smell",
    "details": [
      "Data changed at the same time is not kept in the same place.",
      "Can be fixed with Move Method."
    ]
  },
  "moveMethod": {
    "name": "Move Method",
    "type": "refactoring",
    "details": [
      "Move operations so that similar changes happen in the same place.",
      "Can be used on Feature Envy." 
    ]
  },
  "alternativeClassesWithDifferentInterfaces": {
    "name": "Alternative Classes with Different Interfaces",
    "type": "smell",
    "details": [
      "Two classes perform the same function.",
      "Can be fixed with Add Parameter, Code Deletion." 
    ]
  },
  "addParameter": {
    "name": "Add Parameter",
    "type": "refactoring",
    "details": [
      "If a method doesnâ€™t have enough data to perform an operation, add a new parameter.", 
      "Can be used on Alternative Classes with Different Interfaces." 
    ]
  },
  "longParameterList": {
    "name": "Long Parameter List",
    "type": "smell",
    "details": [
      "A method has too many parameters to be readable.",
      "Can be fixed with Code Deletion."
    ]
  },
  "largeClass": {
    "name": "Large Class",
    "type": "smell",
    "details": [
      "A class trying to do too many things becomes bloated and hard to use and understand.", 
      "Can be fixed with Extract Class."
    ]
  },
  "extractClass": {
    "name": "Extract Class",
    "type": "refactoring",
    "details": [
      "Break a class into two parts, so that each performs their own function.", 
      "Can be used on Large Class."
    ]
  }
}
